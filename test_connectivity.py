# Test Script - Verificaci√≥n de Conectividad

"""
Script de prueba para verificar conectividad antes de implementar la automatizaci√≥n completa
"""

import json
import logging
import paramiko
import tempfile
from google.cloud import storage
import os

def test_sftp_connection(config):
    """Prueba la conexi√≥n SFTP"""
    print("üîç Probando conexi√≥n SFTP...")
    
    try:
        transport = paramiko.Transport((config['sftp']['hostname'], config['sftp']['port']))
        
        if 'private_key_path' in config['sftp']:
            private_key = paramiko.RSAKey.from_private_key_file(config['sftp']['private_key_path'])
            transport.connect(username=config['sftp']['username'], pkey=private_key)
        else:
            transport.connect(username=config['sftp']['username'], password=config['sftp']['password'])
        
        sftp = paramiko.SFTPClient.from_transport(transport)
        
        # Probar listar directorio
        remote_dir = config['sftp']['remote_directory']
        sftp.chdir(remote_dir)
        files = sftp.listdir()
        
        print(f"‚úÖ Conexi√≥n SFTP exitosa")
        print(f"üìÅ Directorio: {remote_dir}")
        print(f"üìÑ Archivos encontrados: {len(files)}")
        
        # Mostrar algunos archivos CSV
        csv_files = [f for f in files if f.endswith('.csv')][:5]
        if csv_files:
            print(f"üìã Archivos CSV (primeros 5): {', '.join(csv_files)}")
        else:
            print("‚ö†Ô∏è  No se encontraron archivos CSV")
        
        sftp.close()
        transport.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n SFTP: {str(e)}")
        return False

def test_gcp_connection(config):
    """Prueba la conexi√≥n con GCP Storage"""
    print("\nüîç Probando conexi√≥n GCP Storage...")
    
    try:
        # Configurar credenciales
        if 'service_account_path' in config['gcp']:
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = config['gcp']['service_account_path']
        
        client = storage.Client(project=config['gcp']['project_id'])
        bucket = client.bucket(config['gcp']['bucket_name'])
        
        # Verificar que el bucket existe y es accesible
        bucket.reload()
        
        print(f"‚úÖ Conexi√≥n GCP exitosa")
        print(f"üìÅ Bucket: {config['gcp']['bucket_name']}")
        print(f"üè∑Ô∏è  Proyecto: {config['gcp']['project_id']}")
        
        # Probar crear un archivo de prueba
        test_blob_name = config['gcp']['destination_folder'] + 'test_connection.txt'
        test_blob = bucket.blob(test_blob_name)
        
        test_content = f"Test de conexi√≥n - {str(datetime.datetime.now())}"
        test_blob.upload_from_string(test_content)
        
        print(f"‚úÖ Archivo de prueba creado: gs://{config['gcp']['bucket_name']}/{test_blob_name}")
        
        # Eliminar archivo de prueba
        test_blob.delete()
        print(f"üóëÔ∏è  Archivo de prueba eliminado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n GCP: {str(e)}")
        return False

def test_end_to_end(config):
    """Prueba transferencia completa de un archivo peque√±o"""
    print("\nüîç Probando transferencia completa...")
    
    try:
        # Crear archivo de prueba local
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_file:
            temp_file.write("col1,col2,col3\n")
            temp_file.write("test,data,123\n")
            temp_file_path = temp_file.name
        
        print(f"üìÑ Archivo de prueba creado: {temp_file_path}")
        
        # Subir a GCP
        if 'service_account_path' in config['gcp']:
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = config['gcp']['service_account_path']
        
        client = storage.Client(project=config['gcp']['project_id'])
        bucket = client.bucket(config['gcp']['bucket_name'])
        
        test_blob_name = config['gcp']['destination_folder'] + 'test_transfer.csv'
        blob = bucket.blob(test_blob_name)
        blob.upload_from_filename(temp_file_path)
        
        print(f"‚úÖ Archivo subido exitosamente: gs://{config['gcp']['bucket_name']}/{test_blob_name}")
        
        # Verificar que existe
        blob.reload()
        print(f"üìä Tama√±o del archivo: {blob.size} bytes")
        
        # Limpiar
        blob.delete()
        os.unlink(temp_file_path)
        
        print(f"üóëÔ∏è  Archivos de prueba eliminados")
        print(f"‚úÖ Prueba completa exitosa")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba completa: {str(e)}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ INICIANDO PRUEBAS DE CONECTIVIDAD")
    print("=" * 50)
    
    # Cargar configuraci√≥n
    try:
        with open('config.json', 'r') as f:
            config = json.load(f)
    except FileNotFoundError:
        print("‚ùå No se encontr√≥ config.json")
        print("üí° Copia config.json.example a config.json y config√∫ralo con tus datos")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå Error en formato JSON: {str(e)}")
        return
    
    # Ejecutar pruebas
    results = {
        'sftp': test_sftp_connection(config),
        'gcp': test_gcp_connection(config),
    }
    
    # Solo hacer prueba end-to-end si ambas conexiones funcionan
    if results['sftp'] and results['gcp']:
        results['end_to_end'] = test_end_to_end(config)
    else:
        results['end_to_end'] = False
        print("\n‚ö†Ô∏è  Saltando prueba completa debido a errores de conectividad")
    
    # Resumen
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS:")
    print(f"  SFTP: {'‚úÖ OK' if results['sftp'] else '‚ùå FALLO'}")
    print(f"  GCP:  {'‚úÖ OK' if results['gcp'] else '‚ùå FALLO'}")
    print(f"  E2E:  {'‚úÖ OK' if results['end_to_end'] else '‚ùå FALLO'}")
    
    if all(results.values()):
        print("\nüéâ ¬°Todas las pruebas pasaron! Puedes proceder con la automatizaci√≥n.")
    else:
        print("\n‚ö†Ô∏è  Hay errores que necesitas resolver antes de automatizar.")
        print("\nüí° Consejos para solucionar problemas:")
        if not results['sftp']:
            print("  - Verifica que la VPN est√© conectada")
            print("  - Revisa credenciales SFTP en config.json")
            print("  - Confirma que el directorio remoto existe")
        if not results['gcp']:
            print("  - Verifica credenciales del service account")
            print("  - Confirma permisos en el bucket de GCP")
            print("  - Revisa que el proyecto y bucket existan")

if __name__ == "__main__":
    import datetime
    main()